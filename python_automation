from docx.shared import Cm
from docxtpl import DocxTemplate, InlineImage
from docx.shared import Cm, Inches, Mm, Emu
import random
import datetime
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import geopandas as gpd
import plotly.express as px
import psycopg2
from docx.shared import Cm
from docxtpl import DocxTemplate, InlineImage
from docx.shared import Cm, Inches, Mm, Emu
import random
import datetime
import matplotlib.pyplot as plt
import plotly.express as px
import os
import textwrap 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# import geopandas as gpd
import plotly.express as px
import argparse


template = DocxTemplate('TEMPLATE.docx')

# def main():

# def inputs(projectID: str, title: str,crop: str, country: str, path: str):

def inputs():
    """
    This regions prompts the user to enter the details of the project so that the report is generated using this workflow
    """
    projectID = input("Enter project ID: ")
    title = input("Enter Project name/title: ")
    crop = input("Enter crop/crops insured: ")
    country = input("Enter country/project implementation area: ")
    path = input("Enter path to callcenter CSV downloaded from commcare: ")


    template = DocxTemplate('TEMPLATE.docx')

    id = projectID

    """
    This section connects to MAVUNO database and pulls the CSS datasets. After pulling the datasets, it goes ahead to create a dataframe and then 
    plots the charts. These charts will be used to be inserted in the automated report template as approved ealier.
    
    """
    
    cur = conn.cursor()

    cur.execute(f"""select cce_id, common_questionnaireresponse.responses->'q_row_spacing' as q_row_spacing,
    common_questionnaireresponse.responses->'q_enumerator_comment' as q_enumerator_comment,
    common_questionnaireresponse.responses->'q_farmer_photo' as q_farmer_photo,
    common_questionnaireresponse.responses->'q_village_name' as q_village_name,
    common_questionnaireresponse.responses->'admin1' as admin1,
    common_questionnaireresponse.responses->'q_field_gps' as q_field_gps,
    common_questionnaireresponse.responses->'q_farmer_sign' as q_farmer_sign,
    common_questionnaireresponse.responses->'q_crop_variety' as q_crop_variety,
    common_questionnaireresponse.responses->'q_farm_insured' as q_farm_insured,
    common_questionnaireresponse.responses->'q_intercropping' as q_intercropping,
    common_questionnaireresponse.responses->'q_plant_spacing' as q_plant_spacing,
    common_questionnaireresponse.responses->'q_planting_date' as q_planting_date,
    common_questionnaireresponse.responses->'q_crop_condition' as q_crop_condition,
    common_questionnaireresponse.responses->'q_field_irrigated' as q_field_irrigated,
    common_questionnaireresponse.responses->'q_mode_of_planting' as q_mode_of_planting,
    common_questionnaireresponse.responses->'q_planted_same_crop' as q_planted_same_crop,
    common_questionnaireresponse.responses->'q_distance_to_water_body' as q_distance_to_water_body,
    common_questionnaireresponse.responses->'q_germination_due_to_excess_rain' as q_germination_due_to_excess_rain,
    common_questionnaireresponse.responses->'q_germination_due_to_drought' as q_germination_due_to_drought,
    common_questionnaireresponse.responses->'q_germination_due_to_seed_failure' as q_germination_due_to_seed_failure,
    common_questionnaireresponse.responses->'q_loss_due_to_flood_current_stage' as flood,
    common_questionnaireresponse.responses->'q_loss_due_to_drought_current_stage' as drought,
    common_questionnaireresponse.responses->'q_loss_due_to_pest_disease_current_stage' as pest_and_diseases,
    common_questionnaireresponse.farmer_responses->'age' as age,
    common_questionnaireresponse.farmer_responses->'uai' as uai,
    common_questionnaireresponse.farmer_responses->'name' as name,
    common_questionnaireresponse.farmer_responses->'gender' as gender,
    common_questionnaireresponse.farmer_responses->'farmer_type' as farmer_type,
    common_questionnaireresponse.farmer_responses->'insured_crop' as insured_crop,
    common_project."name"
    from common_questionnaireresponse inner join common_project on
    common_questionnaireresponse.project_id = common_project.id
    where common_project."id" = {id};""")

# Fetch the results and transform it to a dataframe that can be plotted using chats and plots 
    """
    This section pulls data directly from mavuno database and chats the intended outputs

    """
    results = cur.fetchall()

    headers = [i[0] for i in cur.description]

    import pandas as pd
    df = pd.DataFrame (results, columns= headers)

    cur.close()

# Close the database connection
    conn.close()

    # print(df)

    # q_crop_condition



    """
    GENERAL CROP CONDITION

    """


    # value_counts = df['pest_and_diseases'].value_counts()
    # value_counts
    palette = ['#44A7DE', '#142b6e', '#298c37', '#827099', '#0dfc51']

    labels = ['None', '0-25%', '25-50%', '50-75%','75-100%']

    value_counts = df['drought'].value_counts()

    def my_autopct(pct):
        total = sum(value_counts)
        if pct < 5:
            return ""
        else:
            label = '{:.1f}%'.format(pct)
            if len(label) > 5:
                label = textwrap.fill(label, 10)
            return label
    
    fig, ax = plt.subplots()
    pie = ax.pie(value_counts, colors=palette, autopct=my_autopct,pctdistance=0.5,startangle=90)
    ax.set_title('Drought effect on percentage of insured farmers')
    
    plt.legend(pie[0], labels, loc='center left', bbox_to_anchor=(1, 0.5))

    # plt.show()

    fig.savefig('image1.png', dpi=fig.dpi)


    """
    DROUGHT SECTION - GENERATING DROUGHT CHARTS
    
    """

    # value_counts = df['pest_and_diseases'].value_counts()
    # value_counts
    palette = ['#44A7DE', '#142b6e', '#298c37', '#827099', '#0dfc51']

    labels = ['None', '0-25%', '25-50%', '50-75%','75-100%']

    value_counts = df['drought'].value_counts()

    
    fig, ax = plt.subplots()
    pie = ax.pie(value_counts, colors=palette, autopct=my_autopct,pctdistance=0.5,startangle=90)
    
    ax.set_title('Drought effect on percentage of insured farmers')

    
    plt.legend(pie[0], labels, loc='center left', bbox_to_anchor=(1, 0.5))

  

    fig.savefig('image1.png', dpi=fig.dpi)




    fig, ax = plt.subplots()
    # value_counts = df['drought'].value_counts()
    # fig.savefig('image1.png', dpi=fig.dpi)
    bar = ax.bar(value_counts, color=palette)
    ax.set_title('Effects of Drought on insured farmers')
    plt.legend(bar, labels, loc='center left', bbox_to_anchor=(1, 0.5))
    fig.savefig('barD.png', dpi=fig.dpi)




    """
    FLOOD SECTION - GENERATING FLOOD CHARTS
    
    """

    # value_counts = df['pest_and_diseases'].value_counts()
    # value_counts
    palette = ['#44A7DE', '#142b6e', '#298c37', '#827099', '#0dfc51']

    labels = ['None', '0-25%', '25-50%', '50-75%','75-100%']

    value_counts = df['flood'].value_counts()

    # def my_autopct(pct):
    #     total = sum(value_counts)
    #     if pct < 5:
    #         return ""
    #     else:
    #         label = '{:.1f}%'.format(pct)
    #         if len(label) > 5:
    #             label = textwrap.fill(label, 10)
    #         return label
    
    fig, ax = plt.subplots()
    pie = ax.pie(value_counts, colors=palette, autopct=my_autopct,pctdistance=0.5,startangle=90)
    ax.set_title('Flood effect on percentage of insured farmers')
    
    plt.legend(pie[0], labels, loc='center left', bbox_to_anchor=(1, 0.5))

    # plt.show()

    fig.savefig('image2.png', dpi=fig.dpi)

    fig, ax = plt.subplots()
    # value_counts = df['drought'].value_counts()
    fig.savefig('image1.png', dpi=fig.dpi)
    bar = ax.bar(value_counts, color=palette, height = 10)
    ax.set_title('Effects of Floods on insured farmers')
    plt.legend(bar, labels, loc='center left', bbox_to_anchor=(1, 0.5))
    fig.savefig('barF.png', dpi=fig.dpi)

    # table_contents = []

    # image2 = InlineImage(template,'image2.png',Cm(10))

    # context = {
    # 'title': 'Automated Report',
    # 'day': datetime.datetime.now().strftime('%d'),
    # 'month': datetime.datetime.now().strftime('%b'),
    # 'year': datetime.datetime.now().strftime('%Y'),
    # 'table_contents': table_contents,
    # 'image': image2
    # }



    """
   PEST AND DISEASES - GENERATING PEST AND DISEASES CHARTS
    
    """

    # value_counts = df['pest_and_diseases'].value_counts()
    # value_counts
    palette = ['#44A7DE', '#142b6e', '#298c37', '#827099', '#0dfc51']

    labels = ['None', '0-25%', '25-50%', '50-75%','75-100%']

    value_counts = df['pest_and_diseases'].value_counts()


    
    fig, ax = plt.subplots()
    pie = ax.pie(value_counts, colors=palette, autopct=my_autopct,pctdistance=0.5,startangle=90)
    ax.set_title('Pest and diseases effect on percentage of insured farmers')
    
    plt.legend(pie[0], labels, loc='center left', bbox_to_anchor=(1, 0.5))
    fig.savefig('image3.png', dpi=fig.dpi)


    """
    Drawing bar graph foor the affected count of farmers crops
    
    """
    bar = ax.bar(value_counts, height = 10)
    ax.set_title('Effects of Pests on insured farmers')
    plt.legend(bar, labels, loc='center left', bbox_to_anchor=(1, 0.5))
    fig.savefig('barPests.png', dpi=fig.dpi)


    
    





    """
    This sections processes call center data and automatically plots the chats and graphs to the generated report.
    
    """
    
   

    file_path = path

    if file_path.endswith('.csv'):
         df =  pd.read_csv(path)
    elif file_path.endswith(('.xls', '.xlsx')):
         df = pd.read_excel(file_path)
    else:
         raise ValueError("Unsupported file format. Please provide a CSV or Excel File")
    
    df['form.was_there_an_incidence_of_germination_failure_due_to_drought'].replace({'5': 'None', '4': '75-100 %', '3': '50 - 75 %', '2': '50 - 75 %', '1': '0 - 25 %', '---': 'None'}, inplace=True)
    df['form.Is_there_an_incidence_of_germination_failure_due_to_floods_or_excessive_rainfall'].replace({'5': 'None', '4': '75-100 %', '3': '50 - 75 %', '2': '50 - 75 %', '1': '0 - 25 %', '---': 'None'}, inplace=True)
    df['form.overall_germination_rate_in_the_farm'].replace({'5': 'None', '4': '75-100 %', '3': '50 - 75 %', '2': '50 - 75 %', '1': '0 - 25 %', '---': 'None'}, inplace=True)


    drought = df['form.was_there_an_incidence_of_germination_failure_due_to_drought'].value_counts()

    flood = df['form.Is_there_an_incidence_of_germination_failure_due_to_floods_or_excessive_rainfall'].value_counts()

    general = df['form.overall_germination_rate_in_the_farm'].value_counts()



    pie = ax.pie(drought, colors=palette,pctdistance=0.5,startangle=90)
    ax.set_title('Drought effect on percentage of insured farmers')
    plt.legend(pie[0], labels, loc='center left', bbox_to_anchor=(1, 0.5))
    fig.savefig('drought.png', dpi=fig.dpi)



    pie = ax.pie(flood, colors=palette,pctdistance=0.5,startangle=90)
    ax.set_title('Flood effect on percentage of insured farmers')
    plt.legend(pie[0], labels, loc='center left', bbox_to_anchor=(1, 0.5))
    fig.savefig('flood.png', dpi=fig.dpi)


    pie = ax.pie(general, colors=palette,pctdistance=0.5,startangle=90)
    ax.set_title('General germination rate')
    plt.legend(pie[0], labels, loc='center left', bbox_to_anchor=(1, 0.5))
    fig.savefig('general.png', dpi=fig.dpi)



    table_contents = []

    image1 = InlineImage(template,'image1.png',Cm(10))
    image2 = InlineImage(template,'image2.png',Cm(10))
    image3 = InlineImage(template,'image3.png',Cm(10))
    image4 = InlineImage(template,'drought.png',Cm(10))
    image5 = InlineImage(template,'flood.png',Cm(10))
    image6 = InlineImage(template,'general.png',Cm(10))
    image7 = InlineImage(template,'barD.png',Cm(10))
    image8 = InlineImage(template,'barF.png',Cm(10))
    image9 = InlineImage(template,'barPests.png',Cm(10))

    context = {
    'title': 'Automated Report',
    'day': datetime.datetime.now().strftime('%d'),
    'month': datetime.datetime.now().strftime('%b'),
    'year': datetime.datetime.now().strftime('%Y'),
    'table_contents': table_contents,
    'image1': image1,
    'image2': image2,
    'image3': image3,
    'image4': image4,
    'image5': image5,   
    'image6': image6,
    'image7': image7,
    'image8': image8,
    'image9': image9,
    'title': title,
    'crops': crop,
    'country':country
    }


    template.render(context)
    template.save(title + '.docx')
    



    


if __name__ == "__main__":
    inputs()

    
   


# inputs("6403", "AFEX Kenya LR 2023", "Maize","Kenya","D:/1.PULA_RS/REPORT/automated_report/CDR_AFEX_LR_CSV.csv")






